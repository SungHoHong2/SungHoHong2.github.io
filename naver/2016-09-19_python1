
### Jupyter

파이썬을 개발하기 위한 환경 제공 

<br> play.dobest.io/hub/login 
<br> id: python pwd: 파이썬 

### Python 명령어

1. shift + enter : 실행  
2. dd : 해당 줄이 삭제되는 명령어  

### Python의 장점 

파이썬은 다양한 어플리케이션과 연동이 되고 스크립트 언어이기 때문에 작성이 편하다. 
<br> Deep Learning, Machine Learning과 같은 데이터분석에도 사용된다. 
<br> 데이터 분석은 파이썬을 많이 사용하지만 웹프로그래밍 같은 경우는 php, ruby, node.js와 같은 백엔드 개발언어들이 있다. 
<br> 따라서 back-end 자체에 집중을 하는 것이 중요하고 Python 자체에는 연연해선 안 된다. 
<br> Interpretor가 바로 해석해서 실행을 하기 떄문에 Script언어라고 부른다. 


### Index 

1. 자료형 Data Type
2. 조건문 Conditional Statement
3. 반복문 Loops
4. List Comprehension: Lamda + Lamda Operator 
5. 함수
6. 클래스 
7. 웹 프로그래밍 기본 프로젝트 python Flask
8. Crawling(requests, bs4), Data 분석 (Python으로 사용해서 Naver blog 정보 수집 etc) 

<br>

### 자료형

1. list : 순서허용 중복허용
2. set : 순서 중복 불허 
3. dict :  순서 중복 불허 
4. tuple : 순서, 중복 허용, 하지면 변할 수 없음


``` python

#number 
s = 10

#string
d = 'howdy'

#list
#여러 데이터가 순서있게 들어가면서 중복을 허용하는 자료
#끝은 항상 -1을 적용한다.
 
animals = ['dog', 'cat','fish','monkey', 'dog', 'dog']
animals[0]  # 앞에서부터 검색하기 
animals[-2] # 뒤에서부터 검색하기
animals[0:2] # ['dog','cat']
animals[3:] # ['monkey', 'dog', 'dog']
animals[:3] # ['dog', 'cat', 'fish']
animals[::2] # ['dog', 'fish', 'dog']
animals[::-1] #순서를 뒤집는 방법


#dictionary
#key와 Value 으로 분리
f = {'sdf' : 'sdf', 'sdfs': 'sdfdsf'}
student = {
	"name": "name"
	,"title" : "title"
}


#tuple 
#특수용도로 사용된다. 
#list와 유사하고 순서와 중복을 허용한다. 
#변할 수가 없다. (새로 추가 삭제가 불가능하다) 
a, b = (100, 200)



#set
#중복 허용을 하지 않는다.
set[1,1,2,3,4] #[1,2,3,4]

#중복을 제거하고 리스트로 변경하는 방법
list(set(animals))
 
```

### Loop 

``` python 

#static for문 
for i in range(10):
	print('hello world')

#관례적으로 임시변수를 사용하지 않으면 
for _ in range(10):
	print('hello world')


#list for문 
for animal in animals:
	print(animal)

len(animals) #길이 표현 
for animal in range(len(animals)):
	print(animals[i])


#dictionary for문 
for key in student:
	print(key+'=>'+student[key])
 
#student items = tuple을 조회한다.
for key, item in student.items():
	print(key+'=>'+item)


for i in range(len(students)):
	student = students[i]
	
	student_data = {}
	student_data['name'] = student[0]
        student_data['mail'] = student[1]
        student_data['phone'] = student[2]

```

### 조건문 conditional statement

``` python

#양수 음수 0 체크하는 코드 
my_num = 20 
if my_num > 0:
        print('양수입니다.')
elif my_num == 0:
        print('0입니다.')
else:
        print('음수입니다.')

```


### PEP 

Python Enhancement Proposal = Python Style Guide  


### 개발환경 Setting

1.pyenv - 언어 버전 
2.virtualenv - 프로젝트 버전
3.autoenv - 디렉토리별 프로필 (bash profile 유사) 

<br> tmux, screen multiplexer - screen tmux
<br> Editor - vim, EMACS 
<br> Shell - Bash, Zshell(*), Fish
<br> Shell Script

 

### 파일 입출력

``` python

# 항상 열고 닫는 작업을 계속 할 것
# 파일 작성하기
fp = open("hello.txt",'w')
fp.write('Hello World')
fp.close()


# 파일 읽기 
fp2 = open("./hello.txt","r")
fp2.read()
fp2.close()


#파일을 하나만 열경우 자동으로 close가되기 때문에 효율적
with open("hello.txt","r") as fp:
     data = fp.read()
     print(data)


#파일 저장내용 응용하기
with open("../student.csv","r") as fp:
	data = fp.read() #1 파일 읽기  
	rows = data.split("\n") #2 newline char(\n) 나누는 작업
	students = []	
	
	columns = rows[0].split(',')

	for row in rows[1::]:
		fields = row.split(',')
		student = {} 
		for column_index in range(len(columns)):
			field = fields[column_index]
			column = columns[column_index]
			student[column]=field

	students.append(student)

```


### String에 대한 함수
1. split
2. join
3. replace
4. format

``` python

#split 기능 
"dog::cat::fish".split("::")

",".join(["dog", "cat", "fish"])
# output = 'dog, cat, fish'


#replace 기능 
data.replace("\t", ",")

#format 기능
"안녕하세요 %s 입니다." %("안수찬") 
#안녕하세요 안수찬입니다. 
"안녕하세요, {name} 입니다.".format(name="안수찬")

```


### Function


``` python

def read_scv(filename):
	print(filename+"을 읽습니다.")	


read_scv("hello.txt") 


def print_svc(file_name, seperator=","):
    with open(file_name,"r") as fp:
        data = fp.read()
        columns = data.split("\n")[0].split(',')
        row = {}
        list = []

        for d in data.split("\n")[1::]:
            s = d.split(",")

            for col in range(len(columns)):
                row[columns[col]] = s[col]

            list.append(row)
    return list


print(print_svc("../students.csv", ","))


```


### Lamda 익명 함수


``` python 

double(300) #600

def double(x):
	return x*2

lamda_double =lamda x: x*2
lamda_double(100)

#간단하고 일시적인 파일사용할 때
(lamda x: x*2)(100)

read_lsv = lambda filename: read_csv(filename,"|")
read_tsv = lambda filename: read_csv(filename,"\t")

for sep in seps:
	reader[sep] = lambda filename: read_csv(filename, sep)

#Lambda Operator (map, filter, reduce) 
#list와 관련된 부분들을 전부 lambda 하나로 해결할 수 있다. 


```


### 예상 문제 

``` python 

#is_palindrome("토마토") =true 
#is_palindrome("ABCDCBA") = true

  def is_plaindrome(text):
	length = len(text)
	for i in range(length):
		left = string[i] 
		right = string[length-1-i]
		
		if left != right 
			return False

	return True


   #Python 내장기능 적용
   def is_planindrome(string):
	return string == string[::-1]

   
   #Lambda 
   is_palindrome = lambda x: x == x[::-1]


```

ubuntu 1.4.04 verison pyenv, virtualenv, autoenv _ project 2-3 만든 후 activate 여부 확인 
PEP8 문서를 읽어오기, 스타일 가이드에 맞게 작성할 수 있게 하기


