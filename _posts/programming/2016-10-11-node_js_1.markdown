---
published: true
title: Node Js Tutorial 1 
layout: post
category: programming
permalink: /programming/
---


### What is Node.Js

Allows the user to build scalable network applicatioins using Javascript on the server-side

<br> 

> Scalability is the capability of a system, network, or process to handle a growing amount of work, or its potential to be enlarged in order to accommodate that growth.[1] For example, it can refer to the capability of a system to increase its total output under an increased load when resources (typically hardware) are added


<br>

Since it is built with c code it is really fast 



### What can we build w ith node.js 

- Websocket Server 
- Fast File Upload Client 
- Ad Server
- Any Real-Time Data Apps


### Blocking Code vs Non-Blocking Code 

! Blocking Code | Non-Blocking Code |
| -- | -- |
| Finish each tasks from top to bottom | Handle tasks while doing other tasks Callbacks, (returning the result when the task is complete) are not returned in order  | 


### hello world 

With the code below node.js starts the event loop which continuously checks for Events <br>
when there is a request the loop will use the Callback to return the response


``` javascript

var http = require('http');


http.createServer(function(request, response){

//    Status code of the header
    response.writeHead(200);

//    Response Body
    response.write("Hello this is the node.js ")

//    Close the connection
    response.end();

}).listen(8080);  //Listen for connections on this port

console.log('Listening on port 8080')

```







``` javascript 

var http = require('http');


http.createServer(function(request, response){

    response.writeHead(200);
    response.write("Hello this is the node.js ")

    setTimeout(function(){
        response.write('Running is done')
        response.end();

    }, 5000);


}).listen(8080);  //Listen for connections on this port

console.log('Listening on port 8080')

```



<br> 


### Events in Node 


``` javascript

/*
 * Listening for error events
 */

var EventEmitter = require('events').EventEmitter;
var logger = new EventEmitter();

logger.on('error', function(message){
    console.log('ERR: '+message);
});

logger.emit('error', 'spilled milk')



/*
 * Adding multiple listeners
 */

var http = require('http');
var server = http.createServer();

server.on('request', function(request, response){

    response.writeHead(200);
    response.write("Hello this is the node.js");
    response.end();

}).listen(8080);

server.on('request', function(request, response){
    console.log('New request comming in...');
})

server.on('close',function(){
    console.log('Closing the server');
})

```


```javascript

/*
 * Using Events
 */

var event = require('events');
var EventEmitter = events.EventEmitter;

chat = new EventEmitter();

var users = [];
var chatlog = [];

chat.on('message', function(message){
    chatlog.push(message);
});

chat.on('join', function(nickname){
    users.push(nickname)
});

chat.emit('join','Bob');
chat.emit('message','Bob');


/*
 * Using Multiple Listeners 
 */ 



```


<br>



### Streaming response 



``` javascript

var http = require('http');
var server = http.createServer();

server.on('request', function(request, response){

    response.writeHead(200);

    request.pipe(response);

    /*
    request.on('readable', function(){
        var chunk = null;
        while(null !== (chunk = request.read())){
            console.log(chunk.toString());
        }
    })

    request.on('end', function(){
        response.end();
    }) */

}).listen(8080);

```


```

curl -d 'hello' http://localhost:8080

```



### Using filestream 

``` javascript

var fs = require('fs')

var file = fs.createReadStream('readme.md');
var newFile = fs.createWriteStream('readme_copy.md');

var file = fs.createReadStream('fruits.txt');

file.on('readable', function(){
    var chunk;
    while(null !== (chunk = file.read())){
        console.log(chunk.toString());
    }
})


```


``` javascript 

var fs = require('fs')
var http = require('http');

http.createServer(function(request, response){
    var newFile = fs.createWriteStream("readme_copy.md");
    request.pipe(newFile)

    request.on('end', function(){
        response.end('uploaded')
    });

}).listen(8080);

```


```

curl --upload-file readme.md http://localhost:8080

```



``` javascript

var fs = require('fs')
var http = require('http');

http.createServer(function(request, response){
    var newFile = fs.createWriteStream("readme_out.md");
    var fileBytes = request.headers['content-length'];
    var uploadBytes = 0;

    request.on('readable', function(){
        var chunk = null;
        while(null !== (chunk=request.read())){
          uploadBytes += chunk.length;
          var progress = (uploadBytes / fileBytes) * 100;
          response.write('progress: '+parseInt(progress, 10) + '%\n');
        }
    })

    request.pipe(newFile)

    request.on('end', function(){
        response.end('uploaded')
    });

}).listen(8080);

```


``` javascript

var fs = require('fs');
var http = require('http');

http.createServer(function(request, response){
    response.writeHead(200, {'Content-Type' : 'text/html'});
    var file = fs.createReadStream('index.html');
    file.pipe(response);

}).listen(8080);

```

<br>





